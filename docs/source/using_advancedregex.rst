===============================
Using the Advanced Regex Tester
===============================

The Advanced Regex Tester has more features and more targeted comparisons than the Regex tester but its usage is a
little more complicated.

File Format
+++++++++++

This tester uses an xml format for its configuration. A sample .testx file is shown below::

    <AdvRegexTester xmlns="http://moodlegradetool.com/advanced_regex">
        <name>Test1</name>
        <main>Hello</main>
        <Definitions>
            <file id="file1">dummy1.txt:dummy.txt</file>
            <Regex id="reg3">(\d+?) \+ (\d+?) = (\d+?)</Regex>
            <input id="name" type="str">Phillip</input>
            <input id="num1" type="int">5</input>
            <input id="num2" type="int">10</input>
            <input id="num3" type="int">15</input>
        </Definitions>
        <Test>
            <Expect prompt="Enter the file name:">
                <input>file1</input>
            </Expect>
            <Expect prompt="Enter your name:">
                <input>name</input>
            </Expect>
            <Expect prompt="Enter two numbers">
                <input>num1</input>
                <input>num2</input>
            </Expect>
            <Expect>
                <match id="equ">reg3</match>
            </Expect>
            <assertion match="equ">
                <group id="1">
                    num1
                </group>
                <group id="2">
                    num2
                </group>
                <group id="3">
                    num3
                </group>
            </assertion>
        </Test>
    </AdvRegexTester>

The testx configuration file must include the namespace otherwise it will not be parsed correctly. The name tag holds
the test's name and the optional main tag holds an alternative main class to run.

Definitions Tag
---------------

The definition tag holds the variable, regex, and other definitions for this test. Every definition must have an id
attribute so it can be identified later. The types of tags are as follows:

    - File: It holds the format of ``source file:destination file``
        The source file is any file declared in :doc:`the configuration folder<gettingstarted>`. That file will get
        copied into the student folder under the name given so that is available to the program. Anytime the
        file is referenced later it is substituted with the destination file name.

    - Input
        A general variable that can be given as input into the program. They also have an associated type, but it is
        currently ignored.

    - Regex
        Any valid regex, if it contains capture groups they can be later used in asserts

Tests and Expects
-----------------

A test tag is a test against a *file*, if no file is given, program output is assumed. This allows this test to also test
against any output files generated by the program. A file can be specified by adding a file attribute to the test tag.

A test tag holds expect tags. Expect tags will cause the test to wait until the provided prompt is encountered in the
program's output (or file). Any match tag in an expect will **only** match text **between** the last prompt and this
one. Be careful with this, it may seem like you're doing things backwards. Any input tags provided will be entered
on the same line with spaces inbetween.

Assertions
----------
Any match that has an id attribute can be used in a assert. In an assert you can test what was captured by the regex
that did the match. You could just test for a proper match in the regex, but this allows you to write more reusable
regexes.

How it scores
+++++++++++++
Each match tag is worth one point. Keep in mind that it only attempts to match between prompts. Each full assertion
is worth an additional point for a pass.

The maximum score is the total number of match tags and assertion tags.